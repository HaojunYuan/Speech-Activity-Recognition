{"ast":null,"code":"var _jsxFileName = \"/Users/brian/Desktop/ML/Speech-Activity-Recognition/src/pages/FinalUpdate/FinalUpdate.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { Typography, Box } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Header } from \"../../components\";\nimport ref from \"../../img/references.png\";\nimport evaluationFig from \"../../img/performance_evaluation.png\";\nimport featureFig from \"../../img/feature_importance.png\";\nimport zcrFig from \"../../img/zcr.png\";\nimport rmsFig from \"../../img/rms.png\";\nimport spectralcentroidFig from \"../../img/spectralcentroid.png\";\nimport spectralrolloffFig from \"../../img/spectralrolloff.png\";\nimport mfccFig from \"../../img/mfcc.png\";\nimport mfccFig2 from \"../../img/mfcc2.png\";\nimport spectralcrest from \"../../img/spectralcrest.png\"; //import { Link } from 'react-router-dom';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  wrapper: {\n    display: \"flex\",\n    alignItems: \"center\",\n    flexDirection: \"column\",\n    paddingTop: \"20px\"\n  },\n  tempWrapper: {\n    display: \"flex\",\n    alignItems: \"center\",\n    flexDirection: \"column\",\n    paddingTop: \"10%\"\n  },\n  link: {\n    textDecoration: \"none\",\n    color: \"#000\"\n  },\n  boxFormat: {\n    width: \"70%\" //paddingBottom:'20px',\n\n  },\n  titleFormat: {\n    paddingBottom: \"10px\",\n    textDecoration: \"none\",\n    color: \"#212F3C\" //fontFamily: '-apple-system',\n\n  },\n  lateTitleFormat: {\n    paddingTop: \"20px\",\n    paddingBottom: \"10px\",\n    textDecoration: \"none\",\n    color: \"#212F3C\" //fontFamily: '-apple-system',\n\n  },\n  titleParagraphFormat: {\n    fontFamily: \"-apple-system\"\n  },\n  titleParagraphFormat2: {\n    fontFamily: \"-apple-system\",\n    padding: \"10px\"\n  },\n  titleParagraphFormat3: {\n    fontFamily: \"-apple-system\",\n    padding: \"10px\",\n    fontWeight: \"bold\"\n  },\n  titleParagraphFormat4: {\n    fontFamily: \"-apple-system\",\n    paddingLeft: \"10px\"\n  },\n  imageFormat: {\n    width: \"50%\",\n    height: \"50%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    flexDirection: \"column\",\n    paddingTop: \"2%\"\n  },\n  imageFormat3: {\n    width: \"70%\",\n    height: \"70%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    flexDirection: \"column\",\n    paddingTop: \"2%\"\n  },\n  imgwrapper: {\n    display: \"flex\",\n    alignItems: \"center\",\n    flexDirection: \"column\",\n    paddingTop: \"2%\"\n  },\n  refwrapper: {\n    display: \"flex\",\n    alignItems: \"center\",\n    flexDirection: \"column\"\n  },\n  refFormat: {\n    width: \"70%\",\n    height: \"70%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    flexDirection: \"column\"\n  }\n}));\n\nconst FinalUpdate = ({\n  tagChange\n}) => {\n  _s();\n\n  const classes = useStyles(); //const theme = useTheme();\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.wrapper,\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      className: classes.boxFormat,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        align: \"center\",\n        variant: \"h4\",\n        className: classes.titleFormat,\n        children: \"Introduction/Background\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"left\",\n        variant: \"subtitle1\",\n        className: classes.titleParagraphFormat2,\n        children: \"Since the introduction of Siri, voice assistants have hugely impacted people's experience with intelligent systems. However, this sudden fad comes with challenges, with the most obvious one being distinguishing human voice from background noises and silence, which necessitates novel approaches to speech detection. To serve this endeavor, our project utilizes machine learning methods to perform human speech recognition against complex noise scenarios.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"center\",\n        variant: \"h4\",\n        className: classes.lateTitleFormat,\n        children: \"Problem Statement\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"left\",\n        variant: \"subtitle1\",\n        className: classes.titleParagraphFormat2,\n        children: \"The fundamental problem is a binary classification. Given an audio source, we aim to distinguition the time intervals containing human speeches from the rest. Additionally, we would filter out background noises of timestamps that are identified as containing speeches.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"center\",\n        variant: \"h4\",\n        className: classes.lateTitleFormat,\n        children: \"Method\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"left\",\n        variant: \"h5\",\n        className: classes.titleParagraphFormat,\n        children: \"Dataset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"left\",\n        variant: \"subtitle1\",\n        className: classes.titleParagraphFormat2,\n        children: [\"- Speech activity detection dataset from Kaggle: 3 sets of data, 738 files in total with their annotations\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 48\n        }, this), \"- Florida Bandmaster Association (FBA) dataset\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 36\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"left\",\n        variant: \"h5\",\n        className: classes.titleParagraphFormat,\n        children: \"Working Process\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"left\",\n        variant: \"subtitle1\",\n        className: classes.titleParagraphFormat2,\n        children: \"For training, accurate annotation of the segment boundaries separating noise, silence, and speech part is required and essential. The dataset we select includes annotation files in praat-textgrids form, so we first need to write a data-preprocessing file to read in these files and build a groundtruth matrix specifying labels of different parts of the audio. Meanwhile, we need to read in the audio file and create a sliding window moving on it, extracting features like mfcc and spectral flux from different time intervals. The next step is to feed our data to the pre-defined model to let the machine learn. We will split our dataset to two parts, maybe 80% for training and 20% for testing. Lastly, we will employ different evaluation methods in class to access our model.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"left\",\n        variant: \"h5\",\n        className: classes.titleParagraphFormat,\n        children: [\" \", \"Training Method\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"left\",\n        variant: \"subtitle1\",\n        className: classes.titleParagraphFormat2,\n        children: [\"Noise, silence and human speech have very different audio features. To distinguish them, we need to first understand how musical features map input datapoints to their groups before later applying these rules to classify hidden, or unseen inputs. \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 46\n        }, this), \"We will compare the performances of popular classification algorithms and then improve the winning model based on our specific use scenario.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 11\n        }, this), \" General Approach: Supervised Learning\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 11\n        }, this), \" Candidate Models: SVM, Random Forest, CNN [1] \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 67\n        }, this), \"Related Libraries: Numpy, Sklearn, Librosa\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 53\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"center\",\n        variant: \"h4\",\n        className: classes.lateTitleFormat,\n        children: \"Data Collection\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"left\",\n        variant: \"h5\",\n        className: classes.titleParagraphFormat,\n        children: \"Data Preprocessing\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"left\",\n        variant: \"subtitle1\",\n        className: classes.titleParagraphFormat2,\n        children: [\"To start off the project, we turn raw audio files into tabular data through signal processing techniques. In DataProcessing.py, we use librosa to load and convert each audio file into a float array. We then stack these arrays vertically and pad zero to those with shorter length, forming a regular audio matrix, with each row as a different audio file. We also return the average sampling rate in this file for later use. In TextfileRead.py, we import textgrid and use this to generate our groundtruth matrix. We achieve this by first constructing a dummy zero matrix with the same shape as the audio matrix. Then we read in different annotation files which label out every starting and ending time of the human speech. We time each timestamp with the sampling rate and get the index of the number we should start labeling 1. With this method, we go through all textgrid files and generate a equal-sized matrix with annotations (labels).\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"left\",\n        variant: \"h5\",\n        className: classes.titleParagraphFormat,\n        children: \"Feature Extraction\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"left\",\n        variant: \"subtitle1\",\n        className: classes.titleParagraphFormat2,\n        children: [\"To capture characteristics of audio files, we decided to generate 11 features which we think are crucial in classifying audio segment. These features are zcr, rms, spectral_centroid, spectral_runoff and 13 coefficients of mfcc. The various features that we have extracted are explained below. These features are common features that are associated with sound recognition and spectrogram analysis. The goal of the project is to separate speech audio from silences, we have noted that not all these features would be needed but as we are including data with noises, features such as mfcc improved the model when non-speech noises are introduced.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"left\",\n        variant: \"subtitle1\",\n        className: classes.titleParagraphFormat2,\n        children: [\"To gain insights into how each feature contributes to this classification problem, Figure 1 below shows how each feature contributes to decrease in node impurity of our random forest model explained in the next section.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.imgwrapper,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            className: classes.imageFormat,\n            src: featureFig,\n            alt: \"...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"left\",\n        variant: \"h5\",\n        className: classes.titleParagraphFormat,\n        children: \"Feature Explaination [4]\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"left\",\n        variant: \"subtitle1\",\n        className: classes.titleParagraphFormat2,\n        children: [\"All Ks here refer to the size of the processing block. And X(i) refers to the signal value generated by the Librosa load() function.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"left\",\n        variant: \"subtitle1\",\n        className: classes.titleParagraphFormat3,\n        children: \"Zero Crossing Rate (ZCR)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"left\",\n        variant: \"subtitle1\",\n        className: classes.titleParagraphFormat4,\n        children: [\"ZCR is a low-level feature describing the number of changes of sign in consecutive blocks of the audio samples.\", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.imgwrapper,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            className: classes.imageFormat2,\n            src: zcrFig,\n            alt: \"...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 324,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 11\n        }, this), \"This function describes how often the signal content changes its sign in the block. The bigger this value is, the more likely that this block contains human voice / sound (any high-frequency content).\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"left\",\n        variant: \"subtitle1\",\n        className: classes.titleParagraphFormat3,\n        children: \"Root Mean Square (RMS)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"left\",\n        variant: \"subtitle1\",\n        className: classes.titleParagraphFormat4,\n        children: [\"RMS is also a low-level feature describing the intensity of the audio signal.\", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.imgwrapper,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            className: classes.imageFormat2,\n            src: rmsFig,\n            alt: \"...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 343,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 11\n        }, this), \"This function describes the root mean square of the signal value in a certain block. The higher this value is, the more likely there is audio in this time period. It also helps smooth out the audio, as the sharp increase of signal value will be smoothed out by other numbers in the same time range.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"left\",\n        variant: \"subtitle1\",\n        className: classes.titleParagraphFormat3,\n        children: \"Spectral Centroid\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"left\",\n        variant: \"subtitle1\",\n        className: classes.titleParagraphFormat4,\n        children: [\"Spectral Centroid describes the center of gravity of the spectral energy, which is defined as the frequency-weighted sum of the power spectrum.\", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.imgwrapper,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            className: classes.imageFormat2,\n            src: spectralcentroidFig,\n            alt: \"...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 362,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 361,\n          columnNumber: 11\n        }, this), \"This feature describes the ratio of high-frequency to low-frequency in the certain block.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"left\",\n        variant: \"subtitle1\",\n        className: classes.titleParagraphFormat3,\n        children: \"Spectral Rolloff\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"left\",\n        variant: \"subtitle1\",\n        className: classes.titleParagraphFormat4,\n        children: [\"The spectral rolloff measures the bandwidth of the analyzed block. It is described as the frequency bin below which the magnitudes of the short-time Fourier Transform of the x(i) reaches a certain percentage of the overall magnitude. Basically, it defines how much energy is lied under a specific frequency.\", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.imgwrapper,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            className: classes.imageFormat,\n            src: spectralrolloffFig,\n            alt: \"...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 381,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"left\",\n        variant: \"subtitle1\",\n        className: classes.titleParagraphFormat3,\n        children: \"Mel-Frequency Cepstral Coefficients (MFCC)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"left\",\n        variant: \"subtitle1\",\n        className: classes.titleParagraphFormat4,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.imgwrapper,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            className: classes.imageFormat,\n            src: mfccFig,\n            alt: \"...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 398,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 400,\n          columnNumber: 11\n        }, this), \"MFCC is a series of coefficients describing the shape of the spectrogram of the audio. The jth coefficient is calculated using the following formula.\", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.imgwrapper,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            className: classes.imageFormat2,\n            src: mfccFig2,\n            alt: \"...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 403,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 402,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"left\",\n        variant: \"subtitle1\",\n        className: classes.titleParagraphFormat3,\n        children: \"Spectral Flux\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"left\",\n        variant: \"subtitle1\",\n        className: classes.titleParagraphFormat4,\n        children: \"Spectral flux defines the amount of change of the spectral shape, which is usually calculated by the average different between Fourier Transform frames. Spectral flux is also a good indicator describing the spectrogram shape of the audio signal.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"left\",\n        variant: \"subtitle1\",\n        className: classes.titleParagraphFormat3,\n        children: \"Spectral Crest\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"left\",\n        variant: \"subtitle1\",\n        className: classes.titleParagraphFormat4,\n        children: [\"Spectral crest factor measures the tonal characteristic. It compares the maximum magnitude of the power spectrum with the sum of the magnitude spectrum.\", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.imgwrapper,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            className: classes.imageFormat2,\n            src: spectralcrest,\n            alt: \"...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 436,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 435,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 438,\n          columnNumber: 11\n        }, this), \"Tonal characteristic generally refers to the ratio between tonal components and noisy components.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"center\",\n        variant: \"h4\",\n        className: classes.lateTitleFormat,\n        children: \"Model Training\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 442,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"left\",\n        variant: \"subtitle1\",\n        className: classes.titleParagraphFormat2,\n        children: [\"After pre-processing and feature extraction, we implemented Random Forest with K-fold Cross Validation, a supervised method, to test the results and evaluating outputs. Since we had 11 individual data sources with different features, in order to involve all possible situations (Male and Female, with and without background noise), we decided to combine all data files to generate one dataset with all information, given that all data files have 2 labels only: a row of data is labeled either \\\"true\\\" (speech) or \\\"false\\\" (non-speech). We then used K-fold cross validation method to split the dataset into 5 folds, leaving 80% of the data for training, and 20% for testing in each of the five trials. For each trial, we applied our evaulation metrics (described in the next section) in order to take average in the end.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 467,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 449,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"center\",\n        variant: \"h4\",\n        className: classes.lateTitleFormat,\n        children: \"Performance Evaluation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 471,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"left\",\n        variant: \"subtitle1\",\n        className: classes.titleParagraphFormat2,\n        children: [\"We used 5 metrics to evaluate model performance: accuracy, balanced accuracy, precision, recall, and F1 score. Evaluation results are shown in Figure 2 below. Notice all 5 metrices are the averages of the 5 cross-validation folds.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 487,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.imgwrapper,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            className: classes.imageFormat,\n            src: evaluationFig,\n            alt: \"...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 489,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 488,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 478,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"center\",\n        variant: \"h4\",\n        className: classes.lateTitleFormat,\n        children: \"Timeline and Team Work Assignment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 497,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"left\",\n        variant: \"h5\",\n        className: classes.titleParagraphFormat,\n        children: \"Proposal (October 7th)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 504,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"left\",\n        variant: \"subtitle1\",\n        className: classes.titleParagraphFormat2,\n        children: [\"Dataset, approach, report - October 3rd\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 517,\n          columnNumber: 11\n        }, this), \"Review cotent and finish proposal - October 7th\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 519,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 520,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 511,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"left\",\n        variant: \"h5\",\n        className: classes.titleParagraphFormat,\n        children: \"Midterm Report (November 16th)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 523,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"left\",\n        variant: \"subtitle1\",\n        className: classes.titleParagraphFormat2,\n        children: [\"Research and architectural design (Team) - October 15th\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 536,\n          columnNumber: 11\n        }, this), \"Data collection and preprocessing (Haojun, Yulong) - October 31st\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 538,\n          columnNumber: 11\n        }, this), \"Train and validate first approach and finish report after evaluation (Bruce, Zeyu, Yulai) - November 16th\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 541,\n          columnNumber: 11\n        }, this), \"Further improve our model by adjusting parameters and optimizing the code (Team) - November 21th\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 544,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 545,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 530,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"left\",\n        variant: \"h5\",\n        className: classes.titleParagraphFormat,\n        children: \"Final Report (December 7th)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 548,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"left\",\n        variant: \"subtitle1\",\n        className: classes.titleParagraphFormat2,\n        children: [\"Add distinguishing feature of approach (Team) - November 25th\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 561,\n          columnNumber: 11\n        }, this), \"Review entire project and finish final report (Team) - December 7th\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 563,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 564,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 555,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"center\",\n        variant: \"h4\",\n        className: classes.lateTitleFormat,\n        children: \"References\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 567,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.refwrapper,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          className: classes.refFormat,\n          src: ref,\n          alt: \"...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 575,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 574,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n};\n\n_s(FinalUpdate, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", false, function () {\n  return [useStyles];\n});\n\n_c = FinalUpdate;\nexport default FinalUpdate;\n\nvar _c;\n\n$RefreshReg$(_c, \"FinalUpdate\");","map":{"version":3,"sources":["/Users/brian/Desktop/ML/Speech-Activity-Recognition/src/pages/FinalUpdate/FinalUpdate.js"],"names":["React","Typography","Box","makeStyles","Header","ref","evaluationFig","featureFig","zcrFig","rmsFig","spectralcentroidFig","spectralrolloffFig","mfccFig","mfccFig2","spectralcrest","useStyles","theme","wrapper","display","alignItems","flexDirection","paddingTop","tempWrapper","link","textDecoration","color","boxFormat","width","titleFormat","paddingBottom","lateTitleFormat","titleParagraphFormat","fontFamily","titleParagraphFormat2","padding","titleParagraphFormat3","fontWeight","titleParagraphFormat4","paddingLeft","imageFormat","height","imageFormat3","imgwrapper","refwrapper","refFormat","FinalUpdate","tagChange","classes","imageFormat2"],"mappings":"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","sourcesContent":["import React from \"react\";\n\nimport { Typography, Box } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Header } from \"../../components\";\nimport ref from \"../../img/references.png\";\nimport evaluationFig from \"../../img/performance_evaluation.png\";\nimport featureFig from \"../../img/feature_importance.png\";\nimport zcrFig from \"../../img/zcr.png\";\nimport rmsFig from \"../../img/rms.png\";\nimport spectralcentroidFig from \"../../img/spectralcentroid.png\";\nimport spectralrolloffFig from \"../../img/spectralrolloff.png\";\nimport mfccFig from \"../../img/mfcc.png\";\nimport mfccFig2 from \"../../img/mfcc2.png\";\nimport spectralcrest from \"../../img/spectralcrest.png\";\n//import { Link } from 'react-router-dom';\n\nconst useStyles = makeStyles((theme) => ({\n  wrapper: {\n    display: \"flex\",\n    alignItems: \"center\",\n    flexDirection: \"column\",\n    paddingTop: \"20px\",\n  },\n  tempWrapper: {\n    display: \"flex\",\n    alignItems: \"center\",\n    flexDirection: \"column\",\n    paddingTop: \"10%\",\n  },\n  link: {\n    textDecoration: \"none\",\n    color: \"#000\",\n  },\n  boxFormat: {\n    width: \"70%\",\n    //paddingBottom:'20px',\n  },\n  titleFormat: {\n    paddingBottom: \"10px\",\n    textDecoration: \"none\",\n    color: \"#212F3C\",\n    //fontFamily: '-apple-system',\n  },\n  lateTitleFormat: {\n    paddingTop: \"20px\",\n    paddingBottom: \"10px\",\n    textDecoration: \"none\",\n    color: \"#212F3C\",\n    //fontFamily: '-apple-system',\n  },\n  titleParagraphFormat: {\n    fontFamily: \"-apple-system\",\n  },\n  titleParagraphFormat2: {\n    fontFamily: \"-apple-system\",\n    padding: \"10px\",\n  },\n  titleParagraphFormat3: {\n    fontFamily: \"-apple-system\",\n    padding: \"10px\",\n    fontWeight: \"bold\",\n  },\n  titleParagraphFormat4: {\n    fontFamily: \"-apple-system\",\n    paddingLeft: \"10px\",\n  },\n  imageFormat: {\n    width: \"50%\",\n    height: \"50%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    flexDirection: \"column\",\n    paddingTop: \"2%\",\n  },\n  imageFormat3: {\n    width: \"70%\",\n    height: \"70%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    flexDirection: \"column\",\n    paddingTop: \"2%\",\n  },\n  imgwrapper: {\n    display: \"flex\",\n    alignItems: \"center\",\n    flexDirection: \"column\",\n    paddingTop: \"2%\",\n  },\n  refwrapper: {\n    display: \"flex\",\n    alignItems: \"center\",\n    flexDirection: \"column\",\n  },\n  refFormat: {\n    width: \"70%\",\n    height: \"70%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    flexDirection: \"column\",\n  },\n}));\n\nconst FinalUpdate = ({ tagChange }) => {\n  const classes = useStyles();\n  //const theme = useTheme();\n\n  return (\n    <div className={classes.wrapper}>\n      <Header></Header>\n      <Box className={classes.boxFormat}>\n        <Typography align=\"center\" variant=\"h4\" className={classes.titleFormat}>\n          Introduction/Background\n        </Typography>\n        <Typography\n          align=\"left\"\n          variant=\"subtitle1\"\n          className={classes.titleParagraphFormat2}\n        >\n          Since the introduction of Siri, voice assistants have hugely impacted\n          people's experience with intelligent systems. However, this sudden fad\n          comes with challenges, with the most obvious one being distinguishing\n          human voice from background noises and silence, which necessitates\n          novel approaches to speech detection. To serve this endeavor, our\n          project utilizes machine learning methods to perform human speech\n          recognition against complex noise scenarios.\n        </Typography>\n\n        <Typography\n          align=\"center\"\n          variant=\"h4\"\n          className={classes.lateTitleFormat}\n        >\n          Problem Statement\n        </Typography>\n        <Typography\n          align=\"left\"\n          variant=\"subtitle1\"\n          className={classes.titleParagraphFormat2}\n        >\n          The fundamental problem is a binary classification. Given an audio\n          source, we aim to distinguition the time intervals containing human\n          speeches from the rest. Additionally, we would filter out background\n          noises of timestamps that are identified as containing speeches.\n        </Typography>\n\n        <Typography\n          align=\"center\"\n          variant=\"h4\"\n          className={classes.lateTitleFormat}\n        >\n          Method\n        </Typography>\n        <Typography\n          align=\"left\"\n          variant=\"h5\"\n          className={classes.titleParagraphFormat}\n        >\n          Dataset\n        </Typography>\n        <Typography\n          align=\"left\"\n          variant=\"subtitle1\"\n          className={classes.titleParagraphFormat2}\n        >\n          - Speech activity detection dataset from Kaggle: 3 sets of data, 738\n          files in total with their annotations<br></br>- Florida Bandmaster\n          Association (FBA) dataset<br></br>\n        </Typography>\n\n        <Typography\n          align=\"left\"\n          variant=\"h5\"\n          className={classes.titleParagraphFormat}\n        >\n          Working Process\n        </Typography>\n        <Typography\n          align=\"left\"\n          variant=\"subtitle1\"\n          className={classes.titleParagraphFormat2}\n        >\n          For training, accurate annotation of the segment boundaries separating\n          noise, silence, and speech part is required and essential. The dataset\n          we select includes annotation files in praat-textgrids form, so we\n          first need to write a data-preprocessing file to read in these files\n          and build a groundtruth matrix specifying labels of different parts of\n          the audio. Meanwhile, we need to read in the audio file and create a\n          sliding window moving on it, extracting features like mfcc and\n          spectral flux from different time intervals. The next step is to feed\n          our data to the pre-defined model to let the machine learn. We will\n          split our dataset to two parts, maybe 80% for training and 20% for\n          testing. Lastly, we will employ different evaluation methods in class\n          to access our model.\n        </Typography>\n\n        <Typography\n          align=\"left\"\n          variant=\"h5\"\n          className={classes.titleParagraphFormat}\n        >\n          {\" \"}\n          Training Method\n        </Typography>\n        <Typography\n          align=\"left\"\n          variant=\"subtitle1\"\n          className={classes.titleParagraphFormat2}\n        >\n          Noise, silence and human speech have very different audio features. To\n          distinguish them, we need to first understand how musical features map\n          input datapoints to their groups before later applying these rules to\n          classify hidden, or unseen inputs. <br></br>\n          We will compare the performances of popular classification algorithms\n          and then improve the winning model based on our specific use scenario.\n          <br></br>\n          <br></br> General Approach: Supervised Learning\n          <br></br> Candidate Models: SVM, Random Forest, CNN [1] <br></br>\n          Related Libraries: Numpy, Sklearn, Librosa<br></br>\n        </Typography>\n\n        <Typography\n          align=\"center\"\n          variant=\"h4\"\n          className={classes.lateTitleFormat}\n        >\n          Data Collection\n        </Typography>\n        <Typography\n          align=\"left\"\n          variant=\"h5\"\n          className={classes.titleParagraphFormat}\n        >\n          Data Preprocessing\n        </Typography>\n        <Typography\n          align=\"left\"\n          variant=\"subtitle1\"\n          className={classes.titleParagraphFormat2}\n        >\n          To start off the project, we turn raw audio files into tabular data\n          through signal processing techniques. In DataProcessing.py, we use\n          librosa to load and convert each audio file into a float array. We\n          then stack these arrays vertically and pad zero to those with shorter\n          length, forming a regular audio matrix, with each row as a different\n          audio file. We also return the average sampling rate in this file for\n          later use. In TextfileRead.py, we import textgrid and use this to\n          generate our groundtruth matrix. We achieve this by first constructing\n          a dummy zero matrix with the same shape as the audio matrix. Then we\n          read in different annotation files which label out every starting and\n          ending time of the human speech. We time each timestamp with the\n          sampling rate and get the index of the number we should start labeling\n          1. With this method, we go through all textgrid files and generate a\n          equal-sized matrix with annotations (labels).\n          <br></br>\n        </Typography>\n\n        <Typography\n          align=\"left\"\n          variant=\"h5\"\n          className={classes.titleParagraphFormat}\n        >\n          Feature Extraction\n        </Typography>\n        <Typography\n          align=\"left\"\n          variant=\"subtitle1\"\n          className={classes.titleParagraphFormat2}\n        >\n          To capture characteristics of audio files, we decided to generate 11\n          features which we think are crucial in classifying audio segment.\n          These features are zcr, rms, spectral_centroid, spectral_runoff and 13\n          coefficients of mfcc. The various features that we have extracted are explained\n          below. These features are common features that are associated with sound recognition \n          and spectrogram analysis. The goal of the project is to separate speech audio from silences,\n          we have noted that not all these features would be needed but as we are including data with noises,\n          features such as mfcc improved the model when non-speech noises are introduced.\n          <br></br>\n        </Typography>\n        <Typography\n          align=\"left\"\n          variant=\"subtitle1\"\n          className={classes.titleParagraphFormat2}\n        >\n          To gain insights into how each feature contributes to this\n          classification problem, Figure 1 below shows how each feature\n          contributes to decrease in node impurity of our random forest model\n          explained in the next section.\n          <br></br>\n          <div className={classes.imgwrapper}>\n          <img className={classes.imageFormat} src={featureFig} alt=\"...\"></img>\n          </div>\n        </Typography>\n\n        <Typography\n          align=\"left\"\n          variant=\"h5\"\n          className={classes.titleParagraphFormat}\n        >\n          Feature Explaination [4]\n        </Typography>\n        <Typography\n          align=\"left\"\n          variant=\"subtitle1\"\n          className={classes.titleParagraphFormat2}\n        >\n          All Ks here refer to the size of the processing block. And X(i) refers to the signal value generated by the Librosa load() function.\n          <br></br>\n        </Typography>\n        <Typography\n          align=\"left\"\n          variant=\"subtitle1\"\n          className={classes.titleParagraphFormat3}\n        >\n          Zero Crossing Rate (ZCR)\n        </Typography>\n        <Typography\n          align=\"left\"\n          variant=\"subtitle1\"\n          className={classes.titleParagraphFormat4}\n        >\n          ZCR is a low-level feature describing the number of changes of sign in consecutive blocks of the audio samples.\n          <div className={classes.imgwrapper}>\n          <img className={classes.imageFormat2} src={zcrFig} alt=\"...\"></img>\n          </div>\n          This function describes how often the signal content changes its sign in the block. The bigger this value is, the more likely that this block contains human voice / sound (any high-frequency content).\n        </Typography>\n\n          <Typography\n          align=\"left\"\n          variant=\"subtitle1\"\n          className={classes.titleParagraphFormat3}\n        >\n          Root Mean Square (RMS)\n        </Typography>\n        <Typography\n          align=\"left\"\n          variant=\"subtitle1\"\n          className={classes.titleParagraphFormat4}\n        >\n          RMS is also a low-level feature describing the intensity of the audio signal. \n          <div className={classes.imgwrapper}>\n          <img className={classes.imageFormat2} src={rmsFig} alt=\"...\"></img>\n          </div>\n          This function describes the root mean square of the signal value in a certain block. The higher this value is, the more likely there is audio in this time period. It also helps smooth out the audio, as the sharp increase of signal value will be smoothed out by other numbers in the same time range.\n        </Typography>\n\n        <Typography\n          align=\"left\"\n          variant=\"subtitle1\"\n          className={classes.titleParagraphFormat3}\n        >\n          Spectral Centroid\n        </Typography>\n        <Typography\n          align=\"left\"\n          variant=\"subtitle1\"\n          className={classes.titleParagraphFormat4}\n        >\n          Spectral Centroid describes the center of gravity of the spectral energy, which is defined as the frequency-weighted sum of the power spectrum. \n          <div className={classes.imgwrapper}>\n          <img className={classes.imageFormat2} src={spectralcentroidFig} alt=\"...\"></img>\n          </div>\n          This feature describes the ratio of high-frequency to low-frequency in the certain block.\n        </Typography>\n\n        <Typography\n          align=\"left\"\n          variant=\"subtitle1\"\n          className={classes.titleParagraphFormat3}\n        >\n          Spectral Rolloff\n        </Typography>\n        <Typography\n          align=\"left\"\n          variant=\"subtitle1\"\n          className={classes.titleParagraphFormat4}\n        >\n          The spectral rolloff measures the bandwidth of the analyzed block. It is described as the frequency bin below which the magnitudes of the short-time Fourier Transform of the x(i) reaches a certain percentage of the overall magnitude. Basically, it defines how much energy is lied under a specific frequency. \n          <div className={classes.imgwrapper}>\n          <img className={classes.imageFormat} src={spectralrolloffFig} alt=\"...\"></img>\n          </div>\n        </Typography>\n\n        <Typography\n          align=\"left\"\n          variant=\"subtitle1\"\n          className={classes.titleParagraphFormat3}\n        >\n          Mel-Frequency Cepstral Coefficients (MFCC)\n        </Typography>\n        <Typography\n          align=\"left\"\n          variant=\"subtitle1\"\n          className={classes.titleParagraphFormat4}\n        >\n          <div className={classes.imgwrapper}>\n          <img className={classes.imageFormat} src={mfccFig} alt=\"...\"></img>\n          </div>\n          <br></br>\n          MFCC is a series of coefficients describing the shape of the spectrogram of the audio. The jth coefficient is calculated using the following formula.\n          <div className={classes.imgwrapper}>\n          <img className={classes.imageFormat2} src={mfccFig2} alt=\"...\"></img>\n          </div>\n        </Typography>\n\n        <Typography\n          align=\"left\"\n          variant=\"subtitle1\"\n          className={classes.titleParagraphFormat3}\n        >\n          Spectral Flux\n        </Typography>\n        <Typography\n          align=\"left\"\n          variant=\"subtitle1\"\n          className={classes.titleParagraphFormat4}\n        >\n          Spectral flux defines the amount of change of the spectral shape, which is usually calculated by the average different between Fourier Transform frames. Spectral flux is also a good indicator describing the spectrogram shape of the audio signal.\n        </Typography>\n\n        <Typography\n          align=\"left\"\n          variant=\"subtitle1\"\n          className={classes.titleParagraphFormat3}\n        >\n          Spectral Crest\n        </Typography>\n        <Typography\n          align=\"left\"\n          variant=\"subtitle1\"\n          className={classes.titleParagraphFormat4}\n        >\n          Spectral crest factor measures the tonal characteristic. It compares the maximum magnitude of the power spectrum with the sum of the magnitude spectrum. \n          <div className={classes.imgwrapper}>\n          <img className={classes.imageFormat2} src={spectralcrest} alt=\"...\"></img>\n          </div>\n          <br></br>\n          Tonal characteristic generally refers to the ratio between tonal components and noisy components.\n          </Typography>\n\n        <Typography\n          align=\"center\"\n          variant=\"h4\"\n          className={classes.lateTitleFormat}\n        >\n          Model Training\n        </Typography>\n        <Typography\n          align=\"left\"\n          variant=\"subtitle1\"\n          className={classes.titleParagraphFormat2}\n        >\n          After pre-processing and feature extraction, we implemented Random\n          Forest with K-fold Cross Validation, a supervised method, to test the\n          results and evaluating outputs. Since we had 11 individual data\n          sources with different features, in order to involve all possible\n          situations (Male and Female, with and without background noise), we\n          decided to combine all data files to generate one dataset with all\n          information, given that all data files have 2 labels only: a row of\n          data is labeled either \"true\" (speech) or \"false\" (non-speech). We\n          then used K-fold cross validation method to split the dataset into 5\n          folds, leaving 80% of the data for training, and 20% for testing in\n          each of the five trials. For each trial, we applied our evaulation\n          metrics (described in the next section) in order to take average in\n          the end.\n          <br></br>\n        </Typography>\n\n\n        <Typography\n          align=\"center\"\n          variant=\"h4\"\n          className={classes.lateTitleFormat}\n        >\n          Performance Evaluation\n        </Typography>\n        <Typography\n          align=\"left\"\n          variant=\"subtitle1\"\n          className={classes.titleParagraphFormat2}\n        >\n          We used 5 metrics to evaluate model performance: accuracy, balanced\n          accuracy, precision, recall, and F1 score. Evaluation results are\n          shown in Figure 2 below. Notice all 5 metrices are the averages of the\n          5 cross-validation folds.\n          <br></br>\n          <div className={classes.imgwrapper}>\n          <img\n            className={classes.imageFormat}\n            src={evaluationFig}\n            alt=\"...\"\n          ></img>\n          </div>\n        </Typography>\n        \n        <Typography\n          align=\"center\"\n          variant=\"h4\"\n          className={classes.lateTitleFormat}\n        >\n          Timeline and Team Work Assignment\n        </Typography>\n        <Typography\n          align=\"left\"\n          variant=\"h5\"\n          className={classes.titleParagraphFormat}\n        >\n          Proposal (October 7th)\n        </Typography>\n        <Typography\n          align=\"left\"\n          variant=\"subtitle1\"\n          className={classes.titleParagraphFormat2}\n        >\n          Dataset, approach, report - October 3rd\n          <br></br>\n          Review cotent and finish proposal - October 7th\n          <br></br>\n          <br></br>\n        </Typography>\n\n        <Typography\n          align=\"left\"\n          variant=\"h5\"\n          className={classes.titleParagraphFormat}\n        >\n          Midterm Report (November 16th)\n        </Typography>\n        <Typography\n          align=\"left\"\n          variant=\"subtitle1\"\n          className={classes.titleParagraphFormat2}\n        >\n          Research and architectural design (Team) - October 15th\n          <br></br>\n          Data collection and preprocessing (Haojun, Yulong) - October 31st\n          <br></br>\n          Train and validate first approach and finish report after evaluation\n          (Bruce, Zeyu, Yulai) - November 16th\n          <br></br>\n          Further improve our model by adjusting parameters and optimizing the\n          code (Team) - November 21th\n          <br></br>\n          <br></br>\n        </Typography>\n\n        <Typography\n          align=\"left\"\n          variant=\"h5\"\n          className={classes.titleParagraphFormat}\n        >\n          Final Report (December 7th)\n        </Typography>\n        <Typography\n          align=\"left\"\n          variant=\"subtitle1\"\n          className={classes.titleParagraphFormat2}\n        >\n          Add distinguishing feature of approach (Team) - November 25th\n          <br></br>\n          Review entire project and finish final report (Team) - December 7th\n          <br></br>\n          <br></br>\n        </Typography>\n\n        <Typography\n          align=\"center\"\n          variant=\"h4\"\n          className={classes.lateTitleFormat}\n        >\n          References\n        </Typography>\n        <div className={classes.refwrapper}>\n          <img className={classes.refFormat} src={ref} alt=\"...\"></img>\n        </div>\n      </Box>\n    </div>\n  );\n};\n\nexport default FinalUpdate;\n"]},"metadata":{},"sourceType":"module"}