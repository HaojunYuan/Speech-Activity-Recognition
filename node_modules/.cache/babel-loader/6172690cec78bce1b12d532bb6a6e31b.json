{"ast":null,"code":"var _jsxFileName = \"/Users/brian/Desktop/ML/Speech-Activity-Recognition/src/pages/MidtermUpdate/MidtermUpdate.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { Typography, Box } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Header } from \"../../components\";\nimport ref from \"../../img/references.png\";\nimport evaluationFig from \"../../img/performance_evaluation.png\";\nimport featureFig from \"../../img/feature_importance.png\"; //import { Link } from 'react-router-dom';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  wrapper: {\n    display: \"flex\",\n    alignItems: \"center\",\n    flexDirection: \"column\",\n    paddingTop: \"20px\"\n  },\n  tempWrapper: {\n    display: \"flex\",\n    alignItems: \"center\",\n    flexDirection: \"column\",\n    paddingTop: \"10%\"\n  },\n  link: {\n    textDecoration: \"none\",\n    color: \"#000\"\n  },\n  boxFormat: {\n    width: \"70%\" //paddingBottom:'20px',\n\n  },\n  titleFormat: {\n    paddingBottom: \"10px\",\n    textDecoration: \"none\",\n    color: \"#212F3C\" //fontFamily: '-apple-system',\n\n  },\n  lateTitleFormat: {\n    paddingTop: \"20px\",\n    paddingBottom: \"10px\",\n    textDecoration: \"none\",\n    color: \"#212F3C\" //fontFamily: '-apple-system',\n\n  },\n  titleParagraphFormat: {\n    fontFamily: \"-apple-system\"\n  },\n  titleParagraphFormat2: {\n    fontFamily: \"-apple-system\",\n    padding: \"10px\"\n  },\n  imageFormat: {\n    width: \"50%\",\n    height: \"50%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    flexDirection: \"column\",\n    paddingTop: \"2%\"\n  },\n  imgwrapper: {\n    display: \"flex\",\n    alignItems: \"center\",\n    flexDirection: \"column\",\n    paddingTop: \"2%\"\n  }\n}));\n\nconst MidtermUpdate = ({\n  tagChange\n}) => {\n  _s();\n\n  const classes = useStyles(); //const theme = useTheme();\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.wrapper,\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      className: classes.boxFormat,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        align: \"center\",\n        variant: \"h4\",\n        className: classes.titleFormat,\n        children: \"Introduction/Background\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"left\",\n        variant: \"subtitle1\",\n        className: classes.titleParagraphFormat2,\n        children: \"Since the introduction of Siri, voice assistants have hugely impacted people's experience with intelligent systems. However, this sudden fad comes with challenges, with the most obvious one being distinguishing human voice from background noises and silence, which necessitates novel approaches to speech detection. To serve this endeavor, our project utilizes machine learning methods to perform human speech recognition against complex noise scenarios.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"center\",\n        variant: \"h4\",\n        className: classes.lateTitleFormat,\n        children: \"Problem Statement\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"left\",\n        variant: \"subtitle1\",\n        className: classes.titleParagraphFormat2,\n        children: \"The fundamental problem is a binary classification. Given an audio source, we aim to distinguition the time intervals containing human speeches from the rest. Additionally, we would filter out background noises of timestamps that are identified as containing speeches.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"center\",\n        variant: \"h4\",\n        className: classes.lateTitleFormat,\n        children: \"Method\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"left\",\n        variant: \"h5\",\n        className: classes.titleParagraphFormat,\n        children: \"Dataset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"left\",\n        variant: \"subtitle1\",\n        className: classes.titleParagraphFormat2,\n        children: [\"- Speech activity detection dataset from Kaggle: 3 sets of data, 738 files in total with their annotations\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 48\n        }, this), \"- Florida Bandmaster Association (FBA) dataset\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 36\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"left\",\n        variant: \"h5\",\n        className: classes.titleParagraphFormat,\n        children: \"Working Process\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"left\",\n        variant: \"subtitle1\",\n        className: classes.titleParagraphFormat2,\n        children: \"For training, accurate annotation of the segment boundaries separating noise, silence, and speech part is required and essential. The dataset we select includes annotation files in praat-textgrids form, so we first need to write a data-preprocessing file to read in these files and build a groundtruth matrix specifying labels of different parts of the audio. Meanwhile, we need to read in the audio file and create a sliding window moving on it, extracting features like mfcc and spectral flux from different time intervals. The next step is to feed our data to the pre-defined model to let the machine learn. We will split our dataset to two parts, maybe 80% for training and 20% for testing. Lastly, we will employ different evaluation methods in class to access our model.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"left\",\n        variant: \"h5\",\n        className: classes.titleParagraphFormat,\n        children: [\" \", \"Training Method\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"left\",\n        variant: \"subtitle1\",\n        className: classes.titleParagraphFormat2,\n        children: [\"Noise, silence and human speech have very different audio features. To distinguish them, we need to first understand how musical features map input datapoints to their groups before later applying these rules to classify hidden, or unseen inputs. \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 46\n        }, this), \"We will compare the performances of popular classification algorithms and then improve the winning model based on our specific use scenario.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 11\n        }, this), \" General Approach: Supervised Learning\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 11\n        }, this), \" Candidate Models: SVM, Random Forest, CNN [1] \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 67\n        }, this), \"Related Libraries: Numpy, Sklearn, Librosa\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 53\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"center\",\n        variant: \"h4\",\n        className: classes.lateTitleFormat,\n        children: \"Data Collection\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"left\",\n        variant: \"h5\",\n        className: classes.titleParagraphFormat,\n        children: \"Data Preprocessing\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"left\",\n        variant: \"subtitle1\",\n        className: classes.titleParagraphFormat2,\n        children: [\"To start off the project, we turn raw audio files into tabular data through signal processing techniques. In DataProcessing.py, we use librosa to load and convert each audio file into a float array. We then stack these arrays vertically and pad zero to those with shorter length, forming a regular audio matrix, with each row as a different audio file. We also return the average sampling rate in this file for later use. In TextfileRead.py, we import textgrid and use this to generate our groundtruth matrix. We achieve this by first constructing a dummy zero matrix with the same shape as the audio matrix. Then we read in different annotation files which label out every starting and ending time of the human speech. We time each timestamp with the sampling rate and get the index of the number we should start labeling 1. With this method, we go through all textgrid files and generate a equal-sized matrix with annotations (labels).\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"left\",\n        variant: \"h5\",\n        className: classes.titleParagraphFormat,\n        children: \"Feature Extraction\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"left\",\n        variant: \"subtitle1\",\n        className: classes.titleParagraphFormat2,\n        children: [\"To capture characteristics of audio files, we decided to generate 11 features which we think are crucial in classifying audio segment. These features are zcr, rms, spectral_centroid, spectral_runoff and 7 coefficients of mfcc. Zcr describes the rate at which a signal changes from positive to negative. Rms stands for root mean square of values within the audio matrix. Spectral centroid and spectral flux describe the spectrum characteristics of the audio. Mfcc, at last, represents Mel Frequency Cepstral Coefficients, which is a series of number describing the overall shape of the audio spectral envelope. We notice that although not all features are needed to merely separate speech audio with silence, some more complicated features, namely, mfcc features, should come in handy when non-speech noises are introduced to the dataset.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"left\",\n        variant: \"subtitle1\",\n        className: classes.titleParagraphFormat,\n        children: [\"To gain insights into how each feature contributes to this classification problem, Figure 1 below shows how each feature contributes to decrease in node impurity of our random forest model explained in the next section.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.imgwrapper,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            className: classes.imageFormat,\n            src: featureFig,\n            alt: \"...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"center\",\n        variant: \"h4\",\n        className: classes.lateTitleFormat,\n        children: \"Model Training\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"left\",\n        variant: \"subtitle1\",\n        className: classes.titleParagraphFormat2,\n        children: [\"After pre-processing and feature extraction, we implemented Random Forest with K-fold Cross Validation, a supervised method, to test the results and evaluating outputs. Since we had 11 individual data sources with different features, in order to involve all possible situations (Male and Female, with and without background noise), we decided to combine all data files to generate one dataset with all information, given that all data files have 2 labels only: a row of data is labeled either \\\"true\\\" (speech) or \\\"false\\\" (non-speech). We then used K-fold cross validation method to split the dataset into 5 folds, leaving 80% of the data for training, and 20% for testing in each of the five trials. For each trial, we applied our evaulation metrics (described in the next section) in order to take average in the end.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"center\",\n        variant: \"h4\",\n        className: classes.lateTitleFormat,\n        children: \"Performance Evaluation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"left\",\n        variant: \"subtitle1\",\n        className: classes.titleParagraphFormat2,\n        children: [\"We used 5 metrics to evaluate model performance: accuracy, balanced accuracy, precision, recall, and F1 score. Evaluation results are shown in Figure 2 below. Notice all 5 metrices are the averages of the 5 cross-validation folds.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.imgwrapper,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            className: classes.imageFormat,\n            src: evaluationFig,\n            alt: \"...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"center\",\n        variant: \"h4\",\n        className: classes.lateTitleFormat,\n        children: \"Timeline and Team Work Assignment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"left\",\n        variant: \"h5\",\n        className: classes.titleParagraphFormat,\n        children: \"Proposal (October 7th)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"left\",\n        variant: \"subtitle1\",\n        className: classes.titleParagraphFormat2,\n        children: [\"Dataset, approach, report - October 3rd\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 11\n        }, this), \"Review cotent and finish proposal - October 7th\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"left\",\n        variant: \"h5\",\n        className: classes.titleParagraphFormat,\n        children: \"Midterm Report (November 16th)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"left\",\n        variant: \"subtitle1\",\n        className: classes.titleParagraphFormat2,\n        children: [\"Research and architectural design (Team) - October 15th\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 358,\n          columnNumber: 11\n        }, this), \"Data collection and preprocessing (Haojun, Yulong) - October 31st\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 11\n        }, this), \"Train and validate first approach and finish report after evaluation (Bruce, Zeyu, Yulai) - November 16th\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 11\n        }, this), \"Further improve our model by adjusting parameters and optimizing the code (Team) - November 21th\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"left\",\n        variant: \"h5\",\n        className: classes.titleParagraphFormat,\n        children: \"Final Report (December 7th)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"left\",\n        variant: \"subtitle1\",\n        className: classes.titleParagraphFormat2,\n        children: [\"Add distinguishing feature of approach (Team) - November 25th\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 383,\n          columnNumber: 11\n        }, this), \"Review entire project and finish final report (Team) - December 7th\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 385,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"center\",\n        variant: \"h4\",\n        className: classes.lateTitleFormat,\n        children: \"References\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.imgwrapper,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          className: classes.imageFormat,\n          src: ref,\n          alt: \"...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MidtermUpdate, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", false, function () {\n  return [useStyles];\n});\n\n_c = MidtermUpdate;\nexport default MidtermUpdate;\n\nvar _c;\n\n$RefreshReg$(_c, \"MidtermUpdate\");","map":{"version":3,"sources":["/Users/brian/Desktop/ML/Speech-Activity-Recognition/src/pages/MidtermUpdate/MidtermUpdate.js"],"names":["React","Typography","Box","makeStyles","Header","ref","evaluationFig","featureFig","useStyles","theme","wrapper","display","alignItems","flexDirection","paddingTop","tempWrapper","link","textDecoration","color","boxFormat","width","titleFormat","paddingBottom","lateTitleFormat","titleParagraphFormat","fontFamily","titleParagraphFormat2","padding","imageFormat","height","imgwrapper","MidtermUpdate","tagChange","classes"],"mappings":"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","sourcesContent":["import React from \"react\";\n\nimport { Typography, Box } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Header } from \"../../components\";\nimport ref from \"../../img/references.png\";\nimport evaluationFig from \"../../img/performance_evaluation.png\";\nimport featureFig from \"../../img/feature_importance.png\";\n//import { Link } from 'react-router-dom';\n\nconst useStyles = makeStyles((theme) => ({\n  wrapper: {\n    display: \"flex\",\n    alignItems: \"center\",\n    flexDirection: \"column\",\n    paddingTop: \"20px\",\n  },\n  tempWrapper: {\n    display: \"flex\",\n    alignItems: \"center\",\n    flexDirection: \"column\",\n    paddingTop: \"10%\",\n  },\n  link: {\n    textDecoration: \"none\",\n    color: \"#000\",\n  },\n  boxFormat: {\n    width: \"70%\",\n    //paddingBottom:'20px',\n  },\n  titleFormat: {\n    paddingBottom: \"10px\",\n    textDecoration: \"none\",\n    color: \"#212F3C\",\n    //fontFamily: '-apple-system',\n  },\n  lateTitleFormat: {\n    paddingTop: \"20px\",\n    paddingBottom: \"10px\",\n    textDecoration: \"none\",\n    color: \"#212F3C\",\n    //fontFamily: '-apple-system',\n  },\n  titleParagraphFormat: {\n    fontFamily: \"-apple-system\",\n  },\n  titleParagraphFormat2: {\n    fontFamily: \"-apple-system\",\n    padding: \"10px\",\n  },\n  imageFormat: {\n    width: \"50%\",\n    height: \"50%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    flexDirection: \"column\",\n    paddingTop: \"2%\",\n  },\n  imgwrapper: {\n    display: \"flex\",\n    alignItems: \"center\",\n    flexDirection: \"column\",\n    paddingTop: \"2%\",\n  },\n}));\n\nconst MidtermUpdate = ({ tagChange }) => {\n  const classes = useStyles();\n  //const theme = useTheme();\n\n  return (\n    <div className={classes.wrapper}>\n      <Header></Header>\n      <Box className={classes.boxFormat}>\n        <Typography align=\"center\" variant=\"h4\" className={classes.titleFormat}>\n          Introduction/Background\n        </Typography>\n        <Typography\n          align=\"left\"\n          variant=\"subtitle1\"\n          className={classes.titleParagraphFormat2}\n        >\n          Since the introduction of Siri, voice assistants have hugely impacted\n          people's experience with intelligent systems. However, this sudden fad\n          comes with challenges, with the most obvious one being distinguishing\n          human voice from background noises and silence, which necessitates\n          novel approaches to speech detection. To serve this endeavor, our\n          project utilizes machine learning methods to perform human speech\n          recognition against complex noise scenarios.\n        </Typography>\n\n        <Typography\n          align=\"center\"\n          variant=\"h4\"\n          className={classes.lateTitleFormat}\n        >\n          Problem Statement\n        </Typography>\n        <Typography\n          align=\"left\"\n          variant=\"subtitle1\"\n          className={classes.titleParagraphFormat2}\n        >\n          The fundamental problem is a binary classification. Given an audio\n          source, we aim to distinguition the time intervals containing human\n          speeches from the rest. Additionally, we would filter out background\n          noises of timestamps that are identified as containing speeches.\n        </Typography>\n\n        <Typography\n          align=\"center\"\n          variant=\"h4\"\n          className={classes.lateTitleFormat}\n        >\n          Method\n        </Typography>\n        <Typography\n          align=\"left\"\n          variant=\"h5\"\n          className={classes.titleParagraphFormat}\n        >\n          Dataset\n        </Typography>\n        <Typography\n          align=\"left\"\n          variant=\"subtitle1\"\n          className={classes.titleParagraphFormat2}\n        >\n          - Speech activity detection dataset from Kaggle: 3 sets of data, 738\n          files in total with their annotations<br></br>- Florida Bandmaster\n          Association (FBA) dataset<br></br>\n        </Typography>\n\n        <Typography\n          align=\"left\"\n          variant=\"h5\"\n          className={classes.titleParagraphFormat}\n        >\n          Working Process\n        </Typography>\n        <Typography\n          align=\"left\"\n          variant=\"subtitle1\"\n          className={classes.titleParagraphFormat2}\n        >\n          For training, accurate annotation of the segment boundaries separating\n          noise, silence, and speech part is required and essential. The dataset\n          we select includes annotation files in praat-textgrids form, so we\n          first need to write a data-preprocessing file to read in these files\n          and build a groundtruth matrix specifying labels of different parts of\n          the audio. Meanwhile, we need to read in the audio file and create a\n          sliding window moving on it, extracting features like mfcc and\n          spectral flux from different time intervals. The next step is to feed\n          our data to the pre-defined model to let the machine learn. We will\n          split our dataset to two parts, maybe 80% for training and 20% for\n          testing. Lastly, we will employ different evaluation methods in class\n          to access our model.\n        </Typography>\n\n        <Typography\n          align=\"left\"\n          variant=\"h5\"\n          className={classes.titleParagraphFormat}\n        >\n          {\" \"}\n          Training Method\n        </Typography>\n        <Typography\n          align=\"left\"\n          variant=\"subtitle1\"\n          className={classes.titleParagraphFormat2}\n        >\n          Noise, silence and human speech have very different audio features. To\n          distinguish them, we need to first understand how musical features map\n          input datapoints to their groups before later applying these rules to\n          classify hidden, or unseen inputs. <br></br>\n          We will compare the performances of popular classification algorithms\n          and then improve the winning model based on our specific use scenario.\n          <br></br>\n          <br></br> General Approach: Supervised Learning\n          <br></br> Candidate Models: SVM, Random Forest, CNN [1] <br></br>\n          Related Libraries: Numpy, Sklearn, Librosa<br></br>\n        </Typography>\n\n        <Typography\n          align=\"center\"\n          variant=\"h4\"\n          className={classes.lateTitleFormat}\n        >\n          Data Collection\n        </Typography>\n        <Typography\n          align=\"left\"\n          variant=\"h5\"\n          className={classes.titleParagraphFormat}\n        >\n          Data Preprocessing\n        </Typography>\n        <Typography\n          align=\"left\"\n          variant=\"subtitle1\"\n          className={classes.titleParagraphFormat2}\n        >\n          To start off the project, we turn raw audio files into tabular data\n          through signal processing techniques. In DataProcessing.py, we use\n          librosa to load and convert each audio file into a float array. We\n          then stack these arrays vertically and pad zero to those with shorter\n          length, forming a regular audio matrix, with each row as a different\n          audio file. We also return the average sampling rate in this file for\n          later use. In TextfileRead.py, we import textgrid and use this to\n          generate our groundtruth matrix. We achieve this by first constructing\n          a dummy zero matrix with the same shape as the audio matrix. Then we\n          read in different annotation files which label out every starting and\n          ending time of the human speech. We time each timestamp with the\n          sampling rate and get the index of the number we should start labeling\n          1. With this method, we go through all textgrid files and generate a\n          equal-sized matrix with annotations (labels).\n          <br></br>\n        </Typography>\n\n        <Typography\n          align=\"left\"\n          variant=\"h5\"\n          className={classes.titleParagraphFormat}\n        >\n          Feature Extraction\n        </Typography>\n        <Typography\n          align=\"left\"\n          variant=\"subtitle1\"\n          className={classes.titleParagraphFormat2}\n        >\n          To capture characteristics of audio files, we decided to generate 11\n          features which we think are crucial in classifying audio segment.\n          These features are zcr, rms, spectral_centroid, spectral_runoff and 7\n          coefficients of mfcc. Zcr describes the rate at which a signal changes\n          from positive to negative. Rms stands for root mean square of values\n          within the audio matrix. Spectral centroid and spectral flux describe\n          the spectrum characteristics of the audio. Mfcc, at last, represents\n          Mel Frequency Cepstral Coefficients, which is a series of number\n          describing the overall shape of the audio spectral envelope. We notice\n          that although not all features are needed to merely separate speech\n          audio with silence, some more complicated features, namely, mfcc\n          features, should come in handy when non-speech noises are introduced\n          to the dataset.\n          <br></br>\n        </Typography>\n        <Typography\n          align=\"left\"\n          variant=\"subtitle1\"\n          className={classes.titleParagraphFormat}\n        >\n          To gain insights into how each feature contributes to this\n          classification problem, Figure 1 below shows how each feature\n          contributes to decrease in node impurity of our random forest model\n          explained in the next section.\n          <br></br>\n          <div className={classes.imgwrapper}>\n          <img className={classes.imageFormat} src={featureFig} alt=\"...\"></img>\n          </div>\n        </Typography>\n\n        <Typography\n          align=\"center\"\n          variant=\"h4\"\n          className={classes.lateTitleFormat}\n        >\n          Model Training\n        </Typography>\n        <Typography\n          align=\"left\"\n          variant=\"subtitle1\"\n          className={classes.titleParagraphFormat2}\n        >\n          After pre-processing and feature extraction, we implemented Random\n          Forest with K-fold Cross Validation, a supervised method, to test the\n          results and evaluating outputs. Since we had 11 individual data\n          sources with different features, in order to involve all possible\n          situations (Male and Female, with and without background noise), we\n          decided to combine all data files to generate one dataset with all\n          information, given that all data files have 2 labels only: a row of\n          data is labeled either \"true\" (speech) or \"false\" (non-speech). We\n          then used K-fold cross validation method to split the dataset into 5\n          folds, leaving 80% of the data for training, and 20% for testing in\n          each of the five trials. For each trial, we applied our evaulation\n          metrics (described in the next section) in order to take average in\n          the end.\n          <br></br>\n        </Typography>\n\n\n        <Typography\n          align=\"center\"\n          variant=\"h4\"\n          className={classes.lateTitleFormat}\n        >\n          Performance Evaluation\n        </Typography>\n        <Typography\n          align=\"left\"\n          variant=\"subtitle1\"\n          className={classes.titleParagraphFormat2}\n        >\n          We used 5 metrics to evaluate model performance: accuracy, balanced\n          accuracy, precision, recall, and F1 score. Evaluation results are\n          shown in Figure 2 below. Notice all 5 metrices are the averages of the\n          5 cross-validation folds.\n          <br></br>\n          <div className={classes.imgwrapper}>\n          <img\n            className={classes.imageFormat}\n            src={evaluationFig}\n            alt=\"...\"\n          ></img>\n          </div>\n        </Typography>\n        \n        <Typography\n          align=\"center\"\n          variant=\"h4\"\n          className={classes.lateTitleFormat}\n        >\n          Timeline and Team Work Assignment\n        </Typography>\n        <Typography\n          align=\"left\"\n          variant=\"h5\"\n          className={classes.titleParagraphFormat}\n        >\n          Proposal (October 7th)\n        </Typography>\n        <Typography\n          align=\"left\"\n          variant=\"subtitle1\"\n          className={classes.titleParagraphFormat2}\n        >\n          Dataset, approach, report - October 3rd\n          <br></br>\n          Review cotent and finish proposal - October 7th\n          <br></br>\n          <br></br>\n        </Typography>\n\n        <Typography\n          align=\"left\"\n          variant=\"h5\"\n          className={classes.titleParagraphFormat}\n        >\n          Midterm Report (November 16th)\n        </Typography>\n        <Typography\n          align=\"left\"\n          variant=\"subtitle1\"\n          className={classes.titleParagraphFormat2}\n        >\n          Research and architectural design (Team) - October 15th\n          <br></br>\n          Data collection and preprocessing (Haojun, Yulong) - October 31st\n          <br></br>\n          Train and validate first approach and finish report after evaluation\n          (Bruce, Zeyu, Yulai) - November 16th\n          <br></br>\n          Further improve our model by adjusting parameters and optimizing the\n          code (Team) - November 21th\n          <br></br>\n          <br></br>\n        </Typography>\n\n        <Typography\n          align=\"left\"\n          variant=\"h5\"\n          className={classes.titleParagraphFormat}\n        >\n          Final Report (December 7th)\n        </Typography>\n        <Typography\n          align=\"left\"\n          variant=\"subtitle1\"\n          className={classes.titleParagraphFormat2}\n        >\n          Add distinguishing feature of approach (Team) - November 25th\n          <br></br>\n          Review entire project and finish final report (Team) - December 7th\n          <br></br>\n          <br></br>\n        </Typography>\n\n        <Typography\n          align=\"center\"\n          variant=\"h4\"\n          className={classes.lateTitleFormat}\n        >\n          References\n        </Typography>\n        <div className={classes.imgwrapper}>\n          <img className={classes.imageFormat} src={ref} alt=\"...\"></img>\n        </div>\n      </Box>\n    </div>\n  );\n};\n\nexport default MidtermUpdate;"]},"metadata":{},"sourceType":"module"}